'use client'

import { useState, useEffect, useCallback } from 'react'
import { Button } from '@/components/ui/button'
import { Card, CardContent } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { WorkflowExecutionLog, WorkflowExecution } from '@/components/workflow-execution-log'
import { 
  ArrowLeft,
  Search,
  RefreshCw,
  Download,
  CheckCircle,
  XCircle,
  AlertCircle,
  Clock,
  TrendingUp,
  Calendar,
  BarChart3
} from 'lucide-react'
import { useRouter } from 'next/navigation'

interface ExecutionSummary {
  total_executions: number
  completed: number
  failed: number
  partial: number
  pending: number
  success_rate: number
  avg_duration_ms: number
}

interface LogsPageProps {
  params: Promise<{ id: string }>
}

export default function WorkflowLogsPage({ params }: LogsPageProps) {
  const router = useRouter()
  const [executions, setExecutions] = useState<WorkflowExecution[]>([])
  const [summary, setSummary] = useState<ExecutionSummary | null>(null)
  const [loading, setLoading] = useState(true)
  const [workflowName, setWorkflowName] = useState('Workflow')
  const [searchQuery, setSearchQuery] = useState('')
  const [statusFilter, setStatusFilter] = useState<string>('all')
  const [dateRange, setDateRange] = useState('7d')
  const [currentPage, setCurrentPage] = useState(1)
  const [totalPages, setTotalPages] = useState(1)
  const [workflowId, setWorkflowId] = useState<string>('')

  useEffect(() => {
    params.then(resolvedParams => {
      setWorkflowId(resolvedParams.id)
    })
  }, [params])

  const loadExecutions = useCallback(async () => {
    setLoading(true)
    try {
      const queryParams = new URLSearchParams({
        status: statusFilter,
        dateRange,
        page: currentPage.toString(),
        limit: '20'
      })

      const response = await fetch(`/api/workflows/${workflowId}/logs?${queryParams}`)
      if (response.ok) {
        const data = await response.json()
        setExecutions(data.executions || [])
        setSummary(data.summary)
        setTotalPages(data.pagination?.total_pages || 1)
        
        // Set workflow name from first execution
        if (data.executions && (data.executions || []).length > 0) {
          setWorkflowName(data.executions[0].template_name || 'Workflow')
        }
      }
    } catch (error) {
      console.error('Failed to load execution logs:', error)
    } finally {
      setLoading(false)
    }
  }, [workflowId, statusFilter, dateRange, currentPage])

  const handleRerunExecution = async (executionId: string) => {
    try {
      // Find the original execution to get trigger data
      const originalExecution = executions.find(e => e.id === executionId)
      if (!originalExecution) return

      const response = await fetch('/api/workflows/execute', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          workflow_id: workflowId,
          trigger_data: originalExecution.trigger_data,
          test_mode: false
        }),
      })

      if (response.ok) {
        // Refresh the logs
        loadExecutions()
      }
    } catch (error) {
      console.error('Failed to rerun execution:', error)
    }
  }

  const filteredExecutions = executions.filter(execution =>
    execution.template_name?.toLowerCase().includes(searchQuery.toLowerCase()) ||
    JSON.stringify(execution.trigger_data).toLowerCase().includes(searchQuery.toLowerCase())
  )

  const getStatusCounts = () => {
    const counts = {
      all: executions.length,
      completed: executions.filter(e => e.status === 'completed').length,
      failed: executions.filter(e => e.status === 'failed').length,
      partial: executions.filter(e => e.status === 'partial').length,
      pending: executions.filter(e => e.status === 'pending' || e.status === 'running').length
    }
    return counts
  }

  const statusCounts = getStatusCounts()

  if (loading && executions.length === 0) {
    return (
      <div className="space-y-6">
        <div className="flex items-center space-x-4">
          <Button variant="outline" size="sm" onClick={() => router.back()}>
            <ArrowLeft className="w-4 h-4 mr-2" />
            Back
          </Button>
          <div>
            <h1 className="text-3xl font-bold">Execution Logs</h1>
            <p className="text-gray-600">Loading workflow execution history...</p>
          </div>
        </div>
        <div className="text-center py-12">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">Loading execution logs...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <Button variant="outline" size="sm" onClick={() => router.back()}>
            <ArrowLeft className="w-4 h-4 mr-2" />
            Back
          </Button>
          <div>
            <h1 className="text-3xl font-bold">Execution Logs</h1>
            <p className="text-gray-600">{workflowName}</p>
          </div>
        </div>
        <div className="flex items-center space-x-2">
          <Button variant="outline" size="sm" onClick={loadExecutions}>
            <RefreshCw className="w-4 h-4 mr-2" />
            Refresh
          </Button>
          <Button variant="outline" size="sm">
            <Download className="w-4 h-4 mr-2" />
            Export
          </Button>
        </div>
      </div>

      {/* Summary Statistics */}
      {summary && (
        <div className="grid grid-cols-1 md:grid-cols-6 gap-4">
          <Card>
            <CardContent className="pt-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Total</p>
                  <p className="text-xl font-bold">{summary.total_executions}</p>
                </div>
                <BarChart3 className="w-6 h-6 text-gray-600" />
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="pt-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Completed</p>
                  <p className="text-xl font-bold text-green-600">{summary.completed}</p>
                </div>
                <CheckCircle className="w-6 h-6 text-green-600" />
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="pt-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Failed</p>
                  <p className="text-xl font-bold text-red-600">{summary.failed}</p>
                </div>
                <XCircle className="w-6 h-6 text-red-600" />
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="pt-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Partial</p>
                  <p className="text-xl font-bold text-yellow-600">{summary.partial}</p>
                </div>
                <AlertCircle className="w-6 h-6 text-yellow-600" />
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="pt-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Success Rate</p>
                  <p className="text-xl font-bold text-blue-600">{summary.success_rate}%</p>
                </div>
                <TrendingUp className="w-6 h-6 text-blue-600" />
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="pt-4">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-600">Avg Time</p>
                  <p className="text-xl font-bold text-purple-600">
                    {summary.avg_duration_ms < 1000 
                      ? `${summary.avg_duration_ms}ms` 
                      : `${(summary.avg_duration_ms / 1000).toFixed(1)}s`}
                  </p>
                </div>
                <Clock className="w-6 h-6 text-purple-600" />
              </div>
            </CardContent>
          </Card>
        </div>
      )}

      {/* Filters */}
      <div className="flex items-center justify-between space-x-4">
        <div className="flex items-center space-x-4">
          {/* Search */}
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
            <Input
              placeholder="Search executions..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="pl-10 w-64"
            />
          </div>

          {/* Status Filter */}
          <div className="flex items-center space-x-2">
            {[
              { key: 'all', label: 'All', count: statusCounts.all },
              { key: 'completed', label: 'Completed', count: statusCounts.completed },
              { key: 'failed', label: 'Failed', count: statusCounts.failed },
              { key: 'partial', label: 'Partial', count: statusCounts.partial },
              { key: 'pending', label: 'Pending', count: statusCounts.pending }
            ].map(status => (
              <Button
                key={status.key}
                variant={statusFilter === status.key ? "default" : "outline"}
                size="sm"
                onClick={() => {
                  setStatusFilter(status.key)
                  setCurrentPage(1)
                }}
              >
                {status.label} ({status.count})
              </Button>
            ))}
          </div>
        </div>

        {/* Date Range Filter */}
        <div className="flex items-center space-x-2">
          <Calendar className="w-4 h-4 text-gray-400" />
          {[
            { key: '1d', label: 'Today' },
            { key: '7d', label: '7 Days' },
            { key: '30d', label: '30 Days' },
            { key: '90d', label: '90 Days' }
          ].map(range => (
            <Button
              key={range.key}
              variant={dateRange === range.key ? "default" : "outline"}
              size="sm"
              onClick={() => {
                setDateRange(range.key)
                setCurrentPage(1)
              }}
            >
              {range.label}
            </Button>
          ))}
        </div>
      </div>

      {/* Execution Logs */}
      <div className="space-y-4">
        {filteredExecutions.length > 0 ? (
          <>
            {filteredExecutions.map((execution) => (
              <WorkflowExecutionLog
                key={execution.id}
                execution={execution}
                onRerun={handleRerunExecution}
                onViewDetails={(id) => console.log('View details:', id)}
              />
            ))}

            {/* Pagination */}
            {totalPages > 1 && (
              <div className="flex items-center justify-between">
                <p className="text-sm text-gray-600">
                  Page {currentPage} of {totalPages}
                </p>
                <div className="flex items-center space-x-2">
                  <Button
                    variant="outline"
                    size="sm"
                    disabled={currentPage <= 1}
                    onClick={() => setCurrentPage(currentPage - 1)}
                  >
                    Previous
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    disabled={currentPage >= totalPages}
                    onClick={() => setCurrentPage(currentPage + 1)}
                  >
                    Next
                  </Button>
                </div>
              </div>
            )}
          </>
        ) : (
          <Card className="text-center py-12">
            <CardContent>
              <Clock className="w-16 h-16 text-gray-400 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">No executions found</h3>
              <p className="text-gray-600">
                {searchQuery || statusFilter !== 'all' 
                  ? 'Try adjusting your filters to see more results.'
                  : 'This workflow hasn\'t been executed yet.'}
              </p>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  )
}