'use client'

import React, { useState, useEffect, useCallback } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { PageWrapper } from '@/components/layouts/page-wrapper'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table'
import { Progress } from '@/components/ui/progress'
import { 
  DollarSign, 
  Clock,
  CheckCircle,
  AlertCircle,
  XCircle,
  Download,
  RefreshCw,
  Eye,
  Edit,
  MoreHorizontal,
  ArrowUpRight,
  ArrowDownLeft,
  CreditCard as PaymentIcon
} from 'lucide-react'
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu'

// Type definitions for comprehensive payment tracking
interface PaymentTransaction {
  id: string
  type: 'incoming' | 'outgoing'
  amount: number
  currency: string
  status: 'pending' | 'processing' | 'completed' | 'failed' | 'cancelled'
  method: 'ach' | 'wire' | 'check' | 'credit_card' | 'manual'
  reference_number: string
  description: string
  customer_id?: string
  customer_name?: string
  invoice_id?: string
  invoice_number?: string
  quickbooks_id?: string
  quickbooks_sync_status: 'pending' | 'synced' | 'failed' | 'not_applicable'
  processed_date?: string
  created_date: string
  batch_id?: string
  fee_amount?: number
  net_amount: number
  metadata?: Record<string, unknown>
}

interface PaymentSummary {
  total_incoming: number
  total_outgoing: number
  net_position: number
  pending_incoming: number
  pending_outgoing: number
  completed_today: number
  failed_count: number
  reconciliation_pending: number
}

interface PaymentMethodBreakdown {
  method: string
  count: number
  total_amount: number
  success_rate: number
}

interface BatchProcess {
  id: string
  type: 'ach_batch' | 'wire_batch' | 'check_batch'
  status: 'preparing' | 'submitted' | 'processing' | 'completed' | 'failed'
  transaction_count: number
  total_amount: number
  created_date: string
  processed_date?: string
  file_name?: string
}

export default function PaymentsDashboard() {
  // State management for comprehensive payment tracking
  const [payments, setPayments] = useState<PaymentTransaction[]>([])
  const [summary, setSummary] = useState<PaymentSummary | null>(null)
  const [methodBreakdown, setMethodBreakdown] = useState<PaymentMethodBreakdown[]>([])
  const [, setBatches] = useState<BatchProcess[]>([])
  const [loading, setLoading] = useState(true)
  const [selectedTab, setSelectedTab] = useState('overview')
  const [filters, setFilters] = useState({
    status: 'all',
    type: 'all',
    method: 'all',
    date_range: '30d',
    search: ''
  })

  // Fetch comprehensive payment data
  const fetchPaymentData = useCallback(async () => {
    setLoading(true)
    try {
      // Fetch payment transactions with full details
      const paymentsResponse = await fetch('/api/payments/transactions?' + new URLSearchParams({
        ...filters,
        include_customer: 'true',
        include_invoice: 'true',
        include_quickbooks: 'true'
      }))
      const paymentsData = await paymentsResponse.json()
      
      // Fetch payment summary metrics
      const summaryResponse = await fetch('/api/payments/summary?' + new URLSearchParams({
        period: filters.date_range
      }))
      const summaryData = await summaryResponse.json()

      // Fetch payment method breakdown
      const methodsResponse = await fetch('/api/payments/methods-breakdown?' + new URLSearchParams({
        period: filters.date_range
      }))
      const methodsData = await methodsResponse.json()

      // Fetch batch processes
      const batchesResponse = await fetch('/api/payments/batches')
      const batchesData = await batchesResponse.json()

      setPayments(paymentsData.data || [])
      setSummary(summaryData.data || null)
      setMethodBreakdown(methodsData.data || [])
      setBatches(batchesData.data || [])
    } catch (error) {
      console.error('Failed to fetch payment data:', error)
    } finally {
      setLoading(false)
    }
  }, [filters])

  // Initial load
  useEffect(() => {
    fetchPaymentData()
  }, [fetchPaymentData])

  // Status styling - standardized with design system
  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed': return 'bg-success-100 text-success-800'
      case 'processing': return 'bg-info-100 text-info-800'
      case 'pending': return 'bg-warning-100 text-warning-800'
      case 'failed': return 'bg-error-100 text-error-800'
      case 'cancelled': return 'bg-neutral-100 text-neutral-800'
      default: return 'bg-neutral-100 text-neutral-800'
    }
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'completed': return <CheckCircle className="w-4 h-4" />
      case 'processing': return <Clock className="w-4 h-4" />
      case 'pending': return <Clock className="w-4 h-4" />
      case 'failed': return <XCircle className="w-4 h-4" />
      case 'cancelled': return <XCircle className="w-4 h-4" />
      default: return <AlertCircle className="w-4 h-4" />
    }
  }

  // Format currency
  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD'
    }).format(amount)
  }

  // Format date
  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    })
  }

  // Export functionality
  const handleExport = async (type: 'csv' | 'excel') => {
    const response = await fetch('/api/payments/export', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ type, filters })
    })
    
    if (response.ok) {
      const blob = await response.blob()
      const url = window.URL.createObjectURL(blob)
      const a = document.createElement('a')
      a.style.display = 'none'
      a.href = url
      a.download = `payments_${new Date().toISOString().split('T')[0]}.${type}`
      document.body.appendChild(a)
      a.click()
      window.URL.revokeObjectURL(url)
    }
  }

  if (loading) {
    return (
      <div className="flex-1 space-y-6 p-8 pt-6">
        <div className="flex items-center justify-center h-96">
          <RefreshCw className="w-8 h-8 animate-spin text-neutral-400" />
        </div>
      </div>
    )
  }

  return (
    <PageWrapper 
      title="Payments Dashboard"
      description="Complete payment tracking with QuickBooks integration and batch processing"
    >
      <div className="space-y-6">
        {/* Header Actions */}
        <div className="flex items-center justify-between -mt-4">
          <div></div>
          <div className="flex items-center space-x-2">
            <Button variant="outline" onClick={() => handleExport('csv')}>
              <Download className="w-4 h-4 mr-2" />
              Export CSV
            </Button>
            <Button variant="outline" onClick={() => handleExport('excel')}>
              <Download className="w-4 h-4 mr-2" />
              Export Excel
            </Button>
            <Button onClick={fetchPaymentData}>
              <RefreshCw className="w-4 h-4 mr-2" />
              Refresh
            </Button>
          </div>
        </div>

        {/* Summary Cards */}
        <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-4">
        <Card className="bg-white border border-neutral-200 rounded-lg shadow-sm">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium text-neutral-900">Total Incoming</CardTitle>
            <ArrowDownLeft className="h-4 w-4 text-success-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-success-600">
              {formatCurrency(summary?.total_incoming || 0)}
            </div>
            <p className="text-xs text-neutral-500">
              +12% from last month
            </p>
          </CardContent>
        </Card>
        
        <Card className="bg-white border border-neutral-200 rounded-lg shadow-sm">
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium text-neutral-900">Total Outgoing</CardTitle>
            <ArrowUpRight className="h-4 w-4 text-error-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-error-600">
              {formatCurrency(summary?.total_outgoing || 0)}
            </div>
            <p className="text-xs text-neutral-500">
              +5% from last month
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Net Position</CardTitle>
            <DollarSign className="h-4 w-4 text-blue-600" />
          </CardHeader>
          <CardContent>
            <div className={`text-2xl font-bold ${(summary?.net_position || 0) >= 0 ? 'text-green-600' : 'text-red-600'}`}>
              {formatCurrency(summary?.net_position || 0)}
            </div>
            <p className="text-xs text-muted-foreground">
              Current cash flow position
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Pending</CardTitle>
            <Clock className="h-4 w-4 text-yellow-600" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-yellow-600">
              {summary?.reconciliation_pending || 0}
            </div>
            <p className="text-xs text-muted-foreground">
              Transactions awaiting reconciliation
            </p>
          </CardContent>
        </Card>
        </div>

        {/* Main Content Tabs */}
        <Tabs value={selectedTab} onValueChange={setSelectedTab}>
        <TabsList className="grid w-full grid-cols-5">
          <TabsTrigger value="overview">Overview</TabsTrigger>
          <TabsTrigger value="transactions">Transactions</TabsTrigger>
          <TabsTrigger value="batches">Batch Processing</TabsTrigger>
          <TabsTrigger value="methods">Payment Methods</TabsTrigger>
          <TabsTrigger value="reconciliation">Reconciliation</TabsTrigger>
        </TabsList>

        {/* Overview Tab */}
        <TabsContent value="overview" className="space-y-4">
          <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
            {/* Payment Method Breakdown */}
            <Card className="col-span-2">
              <CardHeader>
                <CardTitle>Payment Method Performance</CardTitle>
                <CardDescription>Success rates and volumes by payment method</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {methodBreakdown.map((method, index) => (
                    <div key={index} className="flex items-center justify-between">
                      <div className="flex items-center space-x-3">
                        <PaymentIcon className="w-5 h-5 text-gray-400" />
                        <div>
                          <p className="font-medium capitalize">{method.method}</p>
                          <p className="text-sm text-muted-foreground">
                            {method.count} transactions
                          </p>
                        </div>
                      </div>
                      <div className="text-right">
                        <p className="font-medium">{formatCurrency(method.total_amount)}</p>
                        <p className="text-sm text-green-600">{method.success_rate}% success</p>
                      </div>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            {/* QuickBooks Sync Status */}
            <Card>
              <CardHeader>
                <CardTitle>QuickBooks Sync</CardTitle>
                <CardDescription>Integration status</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <span className="text-sm">Synced</span>
                    <Badge className="bg-green-100 text-green-800">
                      {payments.filter(p => p.quickbooks_sync_status === 'synced').length}
                    </Badge>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-sm">Pending</span>
                    <Badge className="bg-yellow-100 text-yellow-800">
                      {payments.filter(p => p.quickbooks_sync_status === 'pending').length}
                    </Badge>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-sm">Failed</span>
                    <Badge className="bg-red-100 text-red-800">
                      {payments.filter(p => p.quickbooks_sync_status === 'failed').length}
                    </Badge>
                  </div>
                  <Progress 
                    value={(payments.filter(p => p.quickbooks_sync_status === 'synced').length / payments.length) * 100}
                    className="mt-2"
                  />
                </div>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        {/* Transactions Tab */}
        <TabsContent value="transactions" className="space-y-4">
          {/* Filters */}
          <Card>
            <CardContent className="pt-6">
              <div className="flex items-center space-x-4">
                <Input
                  placeholder="Search by reference, customer, or invoice..."
                  value={filters.search}
                  onChange={(e) => setFilters({...filters, search: e.target.value})}
                  className="max-w-sm"
                />
                <Select value={filters.status} onValueChange={(value) => setFilters({...filters, status: value})}>
                  <SelectTrigger className="w-[180px]">
                    <SelectValue placeholder="Filter by status" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">All Status</SelectItem>
                    <SelectItem value="completed">Completed</SelectItem>
                    <SelectItem value="pending">Pending</SelectItem>
                    <SelectItem value="processing">Processing</SelectItem>
                    <SelectItem value="failed">Failed</SelectItem>
                  </SelectContent>
                </Select>
                <Select value={filters.type} onValueChange={(value) => setFilters({...filters, type: value})}>
                  <SelectTrigger className="w-[180px]">
                    <SelectValue placeholder="Filter by type" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="all">All Types</SelectItem>
                    <SelectItem value="incoming">Incoming</SelectItem>
                    <SelectItem value="outgoing">Outgoing</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </CardContent>
          </Card>

          {/* Transactions Table */}
          <Card>
            <CardHeader>
              <CardTitle>Payment Transactions</CardTitle>
              <CardDescription>Complete payment history with real-time status</CardDescription>
            </CardHeader>
            <CardContent>
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Reference</TableHead>
                    <TableHead>Type</TableHead>
                    <TableHead>Customer/Vendor</TableHead>
                    <TableHead>Amount</TableHead>
                    <TableHead>Method</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead>QB Sync</TableHead>
                    <TableHead>Date</TableHead>
                    <TableHead>Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {payments.slice(0, 50).map((payment) => (
                    <TableRow key={payment.id}>
                      <TableCell className="font-medium">
                        {payment.reference_number}
                      </TableCell>
                      <TableCell>
                        <Badge variant={payment.type === 'incoming' ? 'default' : 'secondary'}>
                          {payment.type === 'incoming' ? 'Incoming' : 'Outgoing'}
                        </Badge>
                      </TableCell>
                      <TableCell>
                        <div>
                          <p className="font-medium">{payment.customer_name || 'Unknown'}</p>
                          {payment.invoice_number && (
                            <p className="text-sm text-muted-foreground">
                              Inv: {payment.invoice_number}
                            </p>
                          )}
                        </div>
                      </TableCell>
                      <TableCell className="font-medium">
                        <span className={payment.type === 'incoming' ? 'text-green-600' : 'text-red-600'}>
                          {payment.type === 'incoming' ? '+' : '-'}{formatCurrency(payment.amount)}
                        </span>
                      </TableCell>
                      <TableCell className="capitalize">{payment.method}</TableCell>
                      <TableCell>
                        <Badge className={getStatusColor(payment.status)}>
                          <span className="flex items-center space-x-1">
                            {getStatusIcon(payment.status)}
                            <span>{payment.status}</span>
                          </span>
                        </Badge>
                      </TableCell>
                      <TableCell>
                        <Badge 
                          className={
                            payment.quickbooks_sync_status === 'synced' 
                              ? 'bg-green-100 text-green-800'
                              : payment.quickbooks_sync_status === 'pending'
                              ? 'bg-yellow-100 text-yellow-800'
                              : 'bg-red-100 text-red-800'
                          }
                        >
                          {payment.quickbooks_sync_status}
                        </Badge>
                      </TableCell>
                      <TableCell>{formatDate(payment.created_date)}</TableCell>
                      <TableCell>
                        <DropdownMenu>
                          <DropdownMenuTrigger asChild>
                            <Button variant="ghost" className="h-8 w-8 p-0">
                              <MoreHorizontal className="h-4 w-4" />
                            </Button>
                          </DropdownMenuTrigger>
                          <DropdownMenuContent align="end">
                            <DropdownMenuItem>
                              <Eye className="h-4 w-4 mr-2" />
                              View Details
                            </DropdownMenuItem>
                            <DropdownMenuItem>
                              <Edit className="h-4 w-4 mr-2" />
                              Edit
                            </DropdownMenuItem>
                            {payment.quickbooks_sync_status === 'failed' && (
                              <DropdownMenuItem>
                                <RefreshCw className="h-4 w-4 mr-2" />
                                Retry QB Sync
                              </DropdownMenuItem>
                            )}
                          </DropdownMenuContent>
                        </DropdownMenu>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Additional tabs would continue here with the same comprehensive approach */}
        <TabsContent value="batches" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Batch Processing</CardTitle>
              <CardDescription>ACH, Wire, and Check batch operations</CardDescription>
            </CardHeader>
            <CardContent>
              <p className="text-muted-foreground">Batch processing functionality would be implemented here with full database integration.</p>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="methods" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Payment Method Analysis</CardTitle>
              <CardDescription>Detailed breakdown of payment methods and performance</CardDescription>
            </CardHeader>
            <CardContent>
              <p className="text-muted-foreground">Payment method analysis would be implemented here.</p>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="reconciliation" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle>Payment Reconciliation</CardTitle>
              <CardDescription>Bank statement matching and reconciliation tools</CardDescription>
            </CardHeader>
            <CardContent>
              <p className="text-muted-foreground">Reconciliation tools would be implemented here.</p>
            </CardContent>
          </Card>
        </TabsContent>
        </Tabs>
      </div>
    </PageWrapper>
  )
}