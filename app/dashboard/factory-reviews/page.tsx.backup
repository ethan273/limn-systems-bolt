'use client'

import { useState, useEffect } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { 
  Plus, 
  Calendar,
  Clock,
  Users,
  FileText,
  CheckCircle2,
  RefreshCw,
  Factory,
  Eye,
  Edit,
  Download
} from 'lucide-react'
import Link from 'next/link'

interface ReviewSession {
  id: string
  session_name: string
  factory_name: string
  scheduled_date: string
  status: 'scheduled' | 'in_progress' | 'completed' | 'on_hold'
  prototype_count: number
  reviewed_count: number
  participants: string[]
  created_by: string
  created_at: string
  notes?: string
}


interface RevisionRequest {
  id: string
  prototype_id: string
  prototype_name: string
  revision_type: 'minor' | 'major' | 'critical'
  requested_by: string
  requested_date: string
  status: 'pending' | 'in_progress' | 'completed' | 'approved'
  description: string
  estimated_timeline: string
}

export default function FactoryReviewsPage() {
  const [activeTab, setActiveTab] = useState('active-reviews')
  const [reviewSessions, setReviewSessions] = useState<ReviewSession[]>([])
  const [revisionRequests, setRevisionRequests] = useState<RevisionRequest[]>([])
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    loadFactoryReviewData()
  }, [])

  const loadFactoryReviewData = async () => {
    setLoading(true)
    try {
      // Fetch review sessions from API
      const response = await fetch('/api/factory-reviews/sessions')
      if (!response.ok) {
        throw new Error('Failed to fetch review sessions')
      }
      const sessions = await response.json()

      setReviewSessions(sessions)
      setRevisionRequests([]) // These would come from a separate API endpoint
    } catch (error) {
      console.error('Error loading factory review data:', error)
      setReviewSessions([])
      setRevisionRequests([])
    } finally {
      setLoading(false)
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'scheduled': return 'bg-blue-100 text-blue-800'
      case 'in_progress': return 'bg-amber-100 text-amber-800'
      case 'completed': return 'bg-green-100 text-green-800'
      case 'on_hold': return 'bg-gray-100 text-gray-800'
      case 'pending': return 'bg-gray-100 text-gray-800'
      case 'in_review': return 'bg-blue-100 text-blue-800'
      case 'changes_requested': return 'bg-orange-100 text-orange-800'
      case 'approved': return 'bg-green-100 text-green-800'
      case 'rejected': return 'bg-red-100 text-red-800'
      default: return 'bg-gray-100 text-gray-800'
    }
  }


  const getRevisionTypeColor = (type: string) => {
    switch (type) {
      case 'critical': return 'bg-red-100 text-red-800 border-red-300'
      case 'major': return 'bg-orange-100 text-orange-800 border-orange-300'
      case 'minor': return 'bg-blue-100 text-blue-800 border-blue-300'
      default: return 'bg-gray-100 text-gray-800 border-gray-300'
    }
  }

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    })
  }

  if (loading) {
    return (
      <div className="p-6">
        <div className="animate-pulse space-y-6">
          <div className="h-8 bg-stone-200 rounded w-1/3"></div>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {[1, 2, 3].map(i => (
              <div key={i} className="h-40 bg-stone-200 rounded"></div>
            ))}
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Factory Reviews</h1>
          <p className="text-gray-600 mt-1">Manage prototype reviews, shop drawing approvals, and revision workflows</p>
        </div>
        <div className="flex items-center space-x-3">
          <Button variant="outline" onClick={loadFactoryReviewData}>
            <RefreshCw className="h-4 w-4 mr-2" />
            Refresh
          </Button>
          <Link href="/dashboard/factory-reviews/new-session">
            <Button>
              <Plus className="h-4 w-4 mr-2" />
              New Review Session
            </Button>
          </Link>
        </div>
      </div>

      {/* Overview Stats */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium text-gray-700 flex items-center">
              <Factory className="w-4 h-4 mr-2" />
              Active Sessions
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold text-gray-900">
              {reviewSessions.filter(s => s.status === 'in_progress').length}
            </div>
            <div className="text-sm text-blue-600">Currently reviewing</div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium text-gray-700 flex items-center">
              <Clock className="w-4 h-4 mr-2" />
              Pending Review
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold text-gray-900">
              0
            </div>
            <div className="text-sm text-amber-600">Awaiting review</div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium text-gray-700 flex items-center">
              <RefreshCw className="w-4 h-4 mr-2" />
              Active Revisions
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold text-gray-900">
              {revisionRequests.filter(r => r.status === 'in_progress').length}
            </div>
            <div className="text-sm text-orange-600">In progress</div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium text-gray-700 flex items-center">
              <CheckCircle2 className="w-4 h-4 mr-2" />
              Approved Today
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold text-gray-900">
              0
            </div>
            <div className="text-sm text-green-600">Ready for production</div>
          </CardContent>
        </Card>
      </div>

      {/* Main Tabs */}
      <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-6">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="active-reviews">Active Reviews</TabsTrigger>
          <TabsTrigger value="revisions">Shop Drawing Revisions</TabsTrigger>
          <TabsTrigger value="history">Review History</TabsTrigger>
        </TabsList>

        {/* Active Review Sessions */}
        <TabsContent value="active-reviews" className="space-y-4">
          <div className="grid gap-4">
            {reviewSessions.filter(session => session.status !== 'completed').map((session) => (
              <Card key={session.id} className="hover:shadow-md transition-shadow">
                <CardHeader>
                  <div className="flex items-start justify-between">
                    <div>
                      <CardTitle className="text-lg">{session.session_name}</CardTitle>
                      <div className="flex items-center space-x-4 mt-2 text-sm text-gray-600">
                        <div className="flex items-center">
                          <Factory className="w-4 h-4 mr-1" />
                          {session.factory_name}
                        </div>
                        <div className="flex items-center">
                          <Calendar className="w-4 h-4 mr-1" />
                          {formatDate(session.scheduled_date)}
                        </div>
                        <div className="flex items-center">
                          <Users className="w-4 h-4 mr-1" />
                          {session.participants.length} participants
                        </div>
                      </div>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Badge className={getStatusColor(session.status)}>
                        {session.status.replace('_', ' ')}
                      </Badge>
                      {session.status === 'in_progress' && (
                        <div className="text-sm text-gray-600">
                          {session.reviewed_count}/{session.prototype_count} reviewed
                        </div>
                      )}
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    {/* Progress Bar */}
                    <div className="space-y-1">
                      <div className="flex justify-between text-sm text-gray-600">
                        <span>Review Progress</span>
                        <span>{Math.round((session.reviewed_count / session.prototype_count) * 100)}%</span>
                      </div>
                      <div className="w-full bg-gray-200 rounded-full h-2">
                        <div 
                          className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                          style={{ width: `${(session.reviewed_count / session.prototype_count) * 100}%` }}
                        ></div>
                      </div>
                    </div>

                    {/* Participants */}
                    <div>
                      <h4 className="text-sm font-medium text-gray-700 mb-2">Participants</h4>
                      <div className="flex flex-wrap gap-2">
                        {session.participants.map((participant, index) => (
                          <Badge key={index} variant="outline" className="text-xs">
                            {participant}
                          </Badge>
                        ))}
                      </div>
                    </div>

                    {/* Notes */}
                    {session.notes && (
                      <div>
                        <h4 className="text-sm font-medium text-gray-700 mb-1">Notes</h4>
                        <p className="text-sm text-gray-600">{session.notes}</p>
                      </div>
                    )}

                    {/* Actions */}
                    <div className="flex items-center justify-between pt-4 border-t border-gray-200">
                      <div className="text-xs text-gray-500">
                        Created by {session.created_by} on {formatDate(session.created_at)}
                      </div>
                      <div className="flex space-x-2">
                        {session.status === 'scheduled' && (
                          <Button variant="outline" size="sm">
                            <Download className="h-4 w-4 mr-2" />
                            Download Offline Package
                          </Button>
                        )}
                        <Link href={`/dashboard/factory-reviews/sessions/${session.id}`}>
                          <Button size="sm">
                            {session.status === 'in_progress' ? (
                              <>
                                <Edit className="h-4 w-4 mr-2" />
                                Continue Review
                              </>
                            ) : (
                              <>
                                <Eye className="h-4 w-4 mr-2" />
                                View Details
                              </>
                            )}
                          </Button>
                        </Link>
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}

            {reviewSessions.filter(session => session.status !== 'completed').length === 0 && (
              <Card>
                <CardContent className="pt-12 pb-12 text-center">
                  <Factory className="w-16 h-16 text-stone-300 mx-auto mb-4" />
                  <h3 className="text-lg font-medium text-gray-900 mb-2">No active review sessions</h3>
                  <p className="text-gray-600 mb-4">Start a new factory review session to begin the prototype approval process</p>
                  <Link href="/dashboard/factory-reviews/new-session">
                    <Button>
                      <Plus className="h-4 w-4 mr-2" />
                      Create New Session
                    </Button>
                  </Link>
                </CardContent>
              </Card>
            )}
          </div>
        </TabsContent>


        {/* Shop Drawing Revisions */}
        <TabsContent value="revisions" className="space-y-4">
          <div className="grid gap-4">
            {revisionRequests.map((revision) => (
              <Card key={revision.id} className="hover:shadow-md transition-shadow">
                <CardContent className="pt-6">
                  <div className="flex items-start justify-between">
                    <div className="space-y-2">
                      <div>
                        <h3 className="text-lg font-medium text-gray-900">{revision.prototype_name}</h3>
                        <p className="text-sm text-gray-600 mt-1">{revision.description}</p>
                      </div>
                      <div className="flex items-center space-x-3">
                        <Badge className={getStatusColor(revision.status)}>
                          {revision.status.replace('_', ' ')}
                        </Badge>
                        <Badge variant="outline" className={getRevisionTypeColor(revision.revision_type)}>
                          {revision.revision_type.toUpperCase()}
                        </Badge>
                        <span className="text-sm text-gray-600">
                          Est. timeline: {revision.estimated_timeline}
                        </span>
                      </div>
                    </div>
                    <div className="text-right text-sm text-gray-600">
                      <div>Requested by: {revision.requested_by}</div>
                      <div>Date: {formatDate(revision.requested_date)}</div>
                    </div>
                  </div>
                  <div className="flex justify-end mt-4 pt-4 border-t border-gray-200">
                    <div className="flex space-x-2">
                      <Link href={`/dashboard/factory-reviews/revision/${revision.id}`}>
                        <Button variant="outline" size="sm">
                          <Eye className="h-4 w-4 mr-2" />
                          View Revision
                        </Button>
                      </Link>
                      {revision.status === 'completed' && (
                        <Button size="sm">
                          <CheckCircle2 className="h-4 w-4 mr-2" />
                          Review & Approve
                        </Button>
                      )}
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        {/* Review History */}
        <TabsContent value="history" className="space-y-4">
          <Card>
            <CardContent className="pt-12 pb-12 text-center">
              <FileText className="w-16 h-16 text-stone-300 mx-auto mb-4" />
              <h3 className="text-lg font-medium text-gray-900 mb-2">Review History</h3>
              <p className="text-gray-600">Completed review sessions and historical data will appear here</p>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  )
}